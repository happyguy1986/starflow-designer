<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="600" height="400"
		 creationComplete="init()">
	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	
	<fx:Script>
		<![CDATA[
			import com.starflow.components.ActImage;
			import com.starflow.core.support.ValidateProcessDefine;
			import com.starflow.core.support.WindowManager;
			import com.starflow.core.util.ExtendNodeHelper;
			import com.starflow.core.util.Flow;
			import com.starflow.core.util.TriggerEventHelper;
			import com.starflow.model.FreeActivity;
			import com.starflow.model.ManualActivity;
			import com.starflow.model.Operation;
			import com.starflow.model.Participant;
			
			import it.sephiroth.utils.collections.iterators.Iterator;
			
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.http.HTTPService;
			
			public static var instance:ManualActWin = new ManualActWin;
			private var activity:ManualActivity;
			
			/* 查询页面模板回调函数 */
			private static function resultPGHandler(event:ResultEvent):void {
				var result:XML = XML(event.result);  
				var nodes:XMLList = result..node;
				var node:XML = null;  
				Flow.pageTemplates = new ArrayCollection();
				Flow.pageTemplates.addItem({name:"请选择...", id:""});
				for each (node in nodes) {
					var obj:Object = new Object();
					obj.id = node.@id;
					obj.name = node.@name;
					Flow.pageTemplates.addItem(obj);
				}
				instance.pageTemplateCombox.dataProvider = Flow.pageTemplates;
				//设置选择值
				var _action:String = instance.activity.action;
				if(_action != "") {
					var len1:int = Flow.pageTemplates.length;
					for(var i1:int=0; i1<len1; i1++) {
						if(Flow.pageTemplates.getItemAt(i1).id == _action) {
							instance.pageTemplateCombox.selectedIndex = i1;
							break;
						}
					}
				} else
					instance.pageTemplateCombox.selectedIndex=0;
			}
			
			private static function resultActLogicHandler(event:ResultEvent):void {
				var result:XML = XML(event.result);  
				var nodes:XMLList = result..node;
				var node:XML = null;  
				Flow.particiLogices = new ArrayCollection();
				Flow.particiLogices.addItem({name:"请选择...", id:""});
				for each (node in nodes) {
					var obj:Object = new Object();
					obj.id = node.@value;
					obj.name = node.@value;
					Flow.particiLogices.addItem(obj);
				}
				instance.actLogicValue.dataProvider = Flow.particiLogices;
				
				//设置选择值
				var _action:String = instance.activity.particiLogic;
				if(_action != "") {
					var len1:int = Flow.particiLogices.length;
					for(var i1:int=0; i1<len1; i1++) {
						if(Flow.particiLogices.getItemAt(i1).id == _action) {
							instance.actLogicValue.selectedIndex = i1;
							break;
						}
					}
				} else
					instance.actLogicValue.selectedIndex=0;
			}
			
			private static function resultActivateRuleHandler(event:ResultEvent):void {
				var result:XML = XML(event.result);  
				var nodes:XMLList = result..node;
				var node:XML = null;  
				Flow.activateRules = new ArrayCollection();
				Flow.activateRules.addItem({name:"请选择...", id:""});
				for each (node in nodes) {
					var obj:Object = new Object();
					obj.id = node.@value;
					obj.name = node.@value;
					Flow.activateRules.addItem(obj);
				}
				instance.startStrategybyAppActionID.dataProvider = Flow.activateRules;
				
				//设置选择值
				var _action:String = instance.activity.startStrategybyAppAction;
				if(_action != "") {
					var len1:int = Flow.activateRules.length;
					for(var i1:int=0; i1<len1; i1++) {
						if(Flow.activateRules.getItemAt(i1).id == _action) {
							instance.startStrategybyAppActionID.selectedIndex = i1;
							break;
						}
					}
				} else
					instance.startStrategybyAppActionID.selectedIndex=0;
			}
			
			public static function show():void {
				WindowManager.show(instance);
				instance.activity = Flow.rcAct.activity as ManualActivity;
				instance.tabNavigatorID.selectedIndex=0;
				
				//------------------------------基本属性-------------------------------
				instance.actId.text = Flow.rcAct.id;
				instance.actName.text = Flow.rcAct.text;
				instance.limitTime.text = instance.activity.limitTime;
				instance.description.text = Flow.rcAct.activity.description;
				
				if(instance.activity.splitMode == "OR")
					instance.splitOR.selected = true;
				else if(instance.activity.splitMode == "AND")
					instance.splitAND.selected = true;
				else
					instance.splitXOR.selected = true
						
				if(instance.activity.joinMode == "OR")
					instance.joinOR.selected = true;
				else if(instance.activity.joinMode == "AND")
					instance.joinAND.selected = true;
				else
					instance.joinXOR.selected = true;
				
				//------------------------------触发事件-------------------------------
				instance.eventGrid.dataProvider = instance.activity.triggerEvents;
				
				//------------------------------扩展属性-------------------------------
				instance.extendNodeGrid.dataProvider = instance.activity.extendNodes;
				
				//------------------------------环节操作-------------------------------
				//获取流程对应业务类型的业务模板信息。并缓存，避免重复获取。
				if(Flow.pageTemplates == null) {
					var httpService:HTTPService = new HTTPService();
					httpService.addEventListener(ResultEvent.RESULT, resultPGHandler);
					httpService.resultFormat = "xml";
					var flashvars:Object = FlexGlobals.topLevelApplication.parameters;
					httpService.url = flashvars.queryPageTemplateUrl;
					httpService.method = "POST";
					var params:URLVariables = new URLVariables(); 
					params.busiId = flashvars.busiId;
					httpService.send(params);
				} else {
					instance.pageTemplateCombox.dataProvider = Flow.pageTemplates;
					var _action:String = instance.activity.action;
					if(_action != "") {
						var len1:int = Flow.pageTemplates.length;
						for(var i1:int=0; i1<len1; i1++) {
							if(Flow.pageTemplates.getItemAt(i1).id == _action) {
								instance.pageTemplateCombox.selectedIndex = i1;
								break;
							}
						}
					} else
						instance.pageTemplateCombox.selectedIndex=0;
				}
				
				instance.operationGrid.dataProvider = instance.activity.operations;
				
				//------------------------------参与者设置-------------------------------
				if(Flow.particiLogices == null) {
					var httpService:HTTPService = new HTTPService();
					httpService.addEventListener(ResultEvent.RESULT, resultActLogicHandler);
					httpService.resultFormat = "xml";
					var flashvars:Object = FlexGlobals.topLevelApplication.parameters;
					httpService.url = flashvars.querySpringBeanUrl;
					httpService.method = "POST";
					var params:URLVariables = new URLVariables(); 
					params.type = "IParticipantService";
					httpService.send(params);
				} else {
					instance.actLogicValue.dataProvider = Flow.particiLogices;
					var _action:String = instance.activity.particiLogic;
					if(_action != "") {
						var len1:int = Flow.particiLogices.length;
						for(var i1:int=0; i1<len1; i1++) {
							if(Flow.particiLogices.getItemAt(i1).id == _action) {
								instance.actLogicValue.selectedIndex = i1;
								break;
							}
						}
					} else
						instance.actLogicValue.selectedIndex=0;
				}
				
				instance.particiGrid.dataProvider = new ArrayCollection();
				//环节执行者，添加下拉框数据
				var iter:Iterator = Flow.processDefine.actImageMap.values().iterator();
				instance.actExecuterData.removeAll();
				while(iter.hasNext()) {
					var actImage:ActImage = iter.next() as ActImage;
					if(actImage.activity.type=="manual" && Flow.rcAct.id != actImage.id)
						instance.actExecuterData.addItemAt({label:actImage.text, data:actImage.id}, 0);
				}
				instance.actExecuterData.addItemAt({label:"请选择...", data:""}, 0);
				instance.actExecuterValue.selectedIndex = 0;
				if(instance.activity.participantType == "process-starter") {
					instance.processStarterType.selected = true;
					instance.particiGridGroup.enabled = false;
					instance.allowAppointParticipants.enabled = false;
					instance.actExecuterValue.enabled = false;
					instance.actLogicValue.enabled = false;
				} else if(instance.activity.participantType == "org-role") {
					instance.orgType.selected = true;
					instance.particiGridGroup.enabled = true;
					instance.allowAppointParticipants.enabled = true;
					instance.actExecuterValue.enabled = false;
					instance.actLogicValue.enabled = false;
					instance.particiGrid.dataProvider = instance.activity.participants;
				} else if(instance.activity.participantType == "act-executer") {
					instance.actExecuterType.selected = true;
					instance.particiGridGroup.enabled = false;
					instance.allowAppointParticipants.enabled = false;
					instance.actExecuterValue.enabled = true;
					instance.actLogicValue.enabled = false;
					
					//环节执行者，设置值
					var len:int = instance.actExecuterData.length;
					for(var i:int=0; i<len; i++) {
						if(instance.actExecuterData.getItemAt(i).data == instance.activity.particiSpecActID) {
							instance.actExecuterValue.selectedIndex = i;
							break;
						}
					}
				} else if(instance.activity.participantType == "relevantdata") {
					instance.relevantdataType.selected = true;
					instance.particiGridGroup.enabled = false;
					instance.allowAppointParticipants.enabled = false;
					instance.actExecuterValue.enabled = false;
					instance.actLogicValue.enabled = false;
				} else if(instance.activity.participantType == "act-logic") {
					instance.actLogicType.selected = true;
					instance.particiGridGroup.enabled = false;
					instance.allowAppointParticipants.enabled = false;
					instance.actExecuterValue.enabled = false;
					instance.actLogicValue.enabled = true;
					//instance.actLogicValue.selectedItem.data = instance.activity.particiLogic;
				}
				
				//------------------------------多工作项设置-------------------------------
				instance.wiMode.selected = false;
				instance.participantNumber.selected = true;
				instance.specifyNumValue.enabled = false;
				instance.specifyNumValue.text = "";
				instance.finishAll.selected = true;
				instance.specifyPercentValue.enabled = false;
				instance.specifyPercentValue.text = "";
				instance.sequentialExecute.selected = false;
				instance.autoCancel.selected = false;
				
				instance.mutilWiGroup1.enabled = false;
				instance.mutilWiGroup2.enabled = false;
				
				if(instance.activity.wiMode == "multi") {
					instance.wiMode.selected = true;
					instance.mutilWiGroup1.enabled = true;
					instance.mutilWiGroup2.enabled = true;
					if(instance.activity.workitemNumStrategy == "participant-number") {
						instance.participantNumber.selected = true;
						instance.operatorNumber.selected = false;
					} else if(instance.activity.workitemNumStrategy == "operator-number") {
						instance.participantNumber.selected = false;
						instance.operatorNumber.selected = true;
					}
					
					if(instance.activity.finishRule == "all") {
						instance.finishAll.selected = true;
						instance.specifyNum.selected = false;
						instance.specifyPercent.selected = false;
					} else if(instance.activity.finishRule == "specifyNum") {
						instance.finishAll.selected = false;
						instance.specifyNum.selected = true;
						instance.specifyNumValue.enabled = true;
						instance.specifyNumValue.text = instance.activity.finishRquiredNum;
						instance.specifyPercent.selected = false;
					} else if(instance.activity.finishRule == "specifyPercent") {
						instance.finishAll.selected = false;
						instance.specifyNum.selected = false;
						instance.specifyPercent.selected = true;
						instance.specifyPercentValue.enabled = true;
						instance.specifyPercentValue.text = instance.activity.finishRequiredPercent;
					}
					
					instance.sequentialExecute.selected = instance.activity.isSequentialExecute;
					instance.autoCancel.selected = instance.activity.isAutoCancel;
					if(instance.activity.isSequentialExecute) {
						instance.specifyNum.enabled = false;
						instance.specifyNumValue.enabled = false;
						instance.specifyPercent.enabled = false;
						instance.specifyPercentValue.enabled = false;
						instance.autoCancel.enabled = false;
					}
				}
				
				//------------------------------自由流-------------------------------
				instance.isFreeActivity.selected = false;
				instance.freeWithinProcess.selected = true;
				instance.isOnlyLimitedManualActivity.selected = true
				instance.freeWithinActivityGrid.dataProvider = new ArrayCollection();
				
				instance.freeActGroup1.enabled = false;
				instance.freeActGroup2.enabled = false;
				instance.freeWithinActivityListGroup.enabled = false;
				
				if(instance.activity.isFreeActivity == true) {
					instance.isFreeActivity.selected = true;
					instance.freeActGroup1.enabled = true;
					instance.freeActGroup2.enabled = true;
					instance.isOnlyLimitedManualActivity.selected = instance.activity.isOnlyLimitedManualActivity;
					if(instance.activity.freeRangeStrategy == "freeWithinProcess") {
						instance.freeWithinProcess.selected = true;
						instance.freeWithinActivityList.selected = false;
						instance.freeWithinNextActivites.selected = false;
					} else if(instance.activity.freeRangeStrategy == "freeWithinActivityList") {
						instance.freeWithinProcess.selected = false;
						instance.freeWithinActivityList.selected = true;
						instance.freeWithinNextActivites.selected = false;
						instance.freeWithinActivityListGroup.enabled = true;
						instance.freeWithinActivityGrid.dataProvider = instance.activity.freeActivitys;
					} else if(instance.activity.freeRangeStrategy == "freeWithinNextActivites") {
						instance.freeWithinProcess.selected = false;
						instance.freeWithinActivityList.selected = false;
						instance.freeWithinNextActivites.selected = true;
					}
					
					if(instance.activity.isOnlyLimitedManualActivity == true)
						instance.isOnlyLimitedManualActivity.selected = true;
				}
				
				//------------------------------启动策略-------------------------------
				if(Flow.activateRules == null) {
					var httpService:HTTPService = new HTTPService();
					httpService.addEventListener(ResultEvent.RESULT, resultActivateRuleHandler);
					httpService.resultFormat = "xml";
					var flashvars:Object = FlexGlobals.topLevelApplication.parameters;
					httpService.url = flashvars.querySpringBeanUrl;
					httpService.method = "POST";
					var params:URLVariables = new URLVariables(); 
					params.type = "IActivateRuleAction";
					httpService.send(params);
				} else {
					instance.startStrategybyAppActionID.dataProvider = Flow.activateRules;
					var _action:String = instance.activity.startStrategybyAppAction;
					if(_action != "") {
						var len1:int = Flow.activateRules.length;
						for(var i1:int=0; i1<len1; i1++) {
							if(Flow.activateRules.getItemAt(i1).id == _action) {
								instance.startStrategybyAppActionID.selectedIndex = i1;
								break;
							}
						}
					} else
						instance.startStrategybyAppActionID.selectedIndex=0;
				}
				
				if(instance.activity.activateRuleType == "directRunning") {
					instance.directRunningID.selected = true;
					instance.waitingActivitionID.selected = false;
					instance.startStrategybyAppID.selected = false;
					instance.startStrategybyAppActionID.enabled = false;
				} else if(instance.activity.activateRuleType == "waitingActivition") {
					instance.directRunningID.selected = false;
					instance.waitingActivitionID.selected = true;
					instance.startStrategybyAppID.selected = false;
					instance.startStrategybyAppActionID.enabled = false;
				} else if(instance.activity.activateRuleType == "startStrategybyApp") {
					instance.directRunningID.selected = false;
					instance.waitingActivitionID.selected = false;
					instance.startStrategybyAppID.selected = true;
					instance.startStrategybyAppActionID.enabled = true;
					//instance.startStrategybyAppActionID.text = instance.activity.startStrategybyAppAction;
				}
				
				if(instance.activity.resetParticipant == "originalParticipant") {
					instance.originalParticipantID.selected = true;
					instance.finalParticipantID.selected = false;
				} else {
					instance.originalParticipantID.selected = false;
					instance.finalParticipantID.selected = true;
				}
			}
			
			public function save(event:MouseEvent):void {
				WindowManager.hide(instance);
				
				//------------------------------基本属性-------------------------------
				Flow.rcAct.id = actId.text;
				Flow.rcAct.text = actName.text;
				activity.limitTime = limitTime.text;
				activity.description = description.text;
				
				if(splitOR.selected)
					activity.splitMode = "OR";
				else if(splitAND.selected)
					activity.splitMode = "AND";
				else
					activity.splitMode = "XOR";
				
				if(joinOR.selected)
					activity.joinMode = "OR";
				else if(joinAND.selected)
					activity.joinMode = "AND";
				else
					activity.joinMode = "XOR";
				
				//------------------------------环节操作-------------------------------
				activity.action = pageTemplateCombox.selectedItem.id;
				
				//------------------------------参与者设置-------------------------------
				if(processStarterType.selected) { //流程启动者
					activity.participantType = "process-starter";
				} else if (orgType.selected) { //组织机构与角色
					activity.participantType = "org-role";
				} else if (actExecuterType.selected) { //活动执行者
					activity.participantType = "act-executer";
					activity.particiSpecActID = actExecuterValue.selectedItem.data;
				}else if (relevantdataType.selected) { //相关数据区
					activity.participantType = "relevantdata";
				} else if (actLogicType.selected) { //从规则逻辑中获取
					activity.participantType = "act-logic";
					activity.particiLogic = actLogicValue.selectedItem.id;
				}
				activity.isAllowAppointParticipants = allowAppointParticipants.selected;
				
				//------------------------------多工作项设置-------------------------------
				if(wiMode.selected) {
					activity.wiMode = "multi";
					if(participantNumber.selected)
						activity.workitemNumStrategy = "participant-number";
					else
						activity.workitemNumStrategy = "operator-number";
					
					if(specifyNum.selected) {
						activity.finishRule = "specifyNum";
						activity.finishRquiredNum = specifyNumValue.text;
					} else if(specifyPercent.selected) {
						activity.finishRule = "specifyPercent";
						activity.finishRequiredPercent = specifyPercentValue.text;
					} else {
						activity.finishRule = "all";
					}
					
					activity.isSequentialExecute = sequentialExecute.selected;
					activity.isAutoCancel = autoCancel.selected;
				}
				
				//------------------------------自由流-------------------------------
				if(isFreeActivity.selected) {
					activity.isFreeActivity = true;
					if(freeWithinActivityList.selected)
						activity.freeRangeStrategy = "freeWithinActivityList";
					else if(freeWithinNextActivites.selected)
						activity.freeRangeStrategy = "freeWithinNextActivites";
					else
						activity.freeRangeStrategy = "freeWithinProcess";
					
					if(isOnlyLimitedManualActivity.selected) {
						activity.isOnlyLimitedManualActivity = true;
					} else
						activity.isOnlyLimitedManualActivity = false;
				}
				
				//------------------------------启动策略-------------------------------
				if(directRunningID.selected)
					activity.activateRuleType = "directRunning";
				else if(waitingActivitionID.selected)
					activity.activateRuleType = "waitingActivition";
				else if(startStrategybyAppID.selected) {
					activity.activateRuleType = "startStrategybyApp";
					activity.startStrategybyAppAction = startStrategybyAppActionID.selectedItem.id;
				}
				
				if(originalParticipantID.selected)
					activity.resetParticipant = "originalParticipant";
				else
					activity.resetParticipant = "finalParticipant";
				
				ValidateProcessDefine.checkManual(Flow.rcAct);
			}
			
			public function hide(event:MouseEvent):void {
				WindowManager.hide(instance);
			}
			
			public function init():void {
				this.addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandle);
			}
			
			public function keyDownHandle(event:KeyboardEvent):void {
				if (event.charCode == Keyboard.ESCAPE) {
					hide(null);
				} else if(event.charCode == Keyboard.ENTER) {
					save(null);
				}
			}

			protected function partici_changeHandler(event:Event):void {
				var radio:RadioButton = event.target as RadioButton;
				if((processStarterType.selected && radio.id == "processStarterType") || 
						(relevantdataType.selected && radio.id == "relevantdataType")) { //流程启动者 or 相关数据区
					particiGridGroup.enabled = false;
					allowAppointParticipants.enabled = false;
					actExecuterValue.enabled = false;
					actLogicValue.enabled = false;
				} else if (orgType.selected && radio.id == "orgType") { //组织机构与角色
					particiGridGroup.enabled = true;
					allowAppointParticipants.enabled = true;
					actExecuterValue.enabled = false;
					actLogicValue.enabled = false;
				} else if (actExecuterType.selected && radio.id == "actExecuterType") { //活动执行者
					particiGridGroup.enabled = false;
					allowAppointParticipants.enabled = false;
					actExecuterValue.enabled = true;
					actLogicValue.enabled = false;
				} else if (actLogicType.selected && radio.id == "actLogicType") { //从规则逻辑中获取
					particiGridGroup.enabled = false;
					allowAppointParticipants.enabled = false;
					actExecuterValue.enabled = false;
					actLogicValue.enabled = true;
				}
			}
			
			protected function wiMode_changeHandler(event:Event):void {
				var radio:RadioButton = event.target as RadioButton;
				if((specifyNum.selected && radio.id == "specifyNum")) { //流程启动者 or 相关数据区
					specifyNumValue.enabled = true;
					specifyPercentValue.enabled = false;
				} else if (specifyPercent.selected && radio.id == "specifyPercent") { //组织机构与角色
					specifyNumValue.enabled = false;
					specifyPercentValue.enabled = true;
				} else {
					specifyNumValue.enabled = false;
					specifyPercentValue.enabled = false;
				}
			}
			
			protected function freeAct_changeHandler(event:Event):void {
				var radio:RadioButton = event.target as RadioButton;
				if((freeWithinActivityList.selected && radio.id == "freeWithinActivityList")) { //流程启动者 or 相关数据区
					freeWithinActivityListGroup.enabled = true;
				} else {
					freeWithinActivityListGroup.enabled = false;
				}
			}

			protected function checkboxMutilWi_clickHandler(event:MouseEvent):void{
				var checkObj:CheckBox = event.target as CheckBox;
				if(checkObj.selected) {
					mutilWiGroup1.enabled = true;
					mutilWiGroup2.enabled = true;
				} else {
					mutilWiGroup1.enabled = false;
					mutilWiGroup2.enabled = false;
				}
			}
			
			protected function checkboxSeqExecute_clickHandler(event:MouseEvent):void{
				var checkObj:CheckBox = event.target as CheckBox;
				if(checkObj.selected) {
					finishAll.selected = true;
					specifyNum.enabled = false;
					specifyNumValue.enabled = false;
					specifyPercent.enabled = false;
					specifyPercentValue.enabled = false;
					autoCancel.enabled = false;
				} else {
					specifyNum.enabled = true;
					specifyNumValue.enabled = true;
					specifyPercent.enabled = true;
					specifyPercentValue.enabled = true;
					autoCancel.enabled = true;
				}
			}
			
			protected function checkboxFreeAct_clickHandler(event:MouseEvent):void{
				var checkObj:CheckBox = event.target as CheckBox;
				if(checkObj.selected) {
					freeActGroup1.enabled = true;
					freeActGroup2.enabled = true;
				} else {
					freeActGroup1.enabled = false;
					freeActGroup2.enabled = false;
				}
			}

			protected function isOnlyLimitedManualActivity_clickHandler(event:MouseEvent):void{
				if(isOnlyLimitedManualActivity.selected) {
					var len:int = activity.freeActivitys.length;
					var freeActivtiys:ArrayCollection = new ArrayCollection();
					for(var i:int=0; i<len; i++) {
						var freeAct:FreeActivity = activity.freeActivitys.getItemAt(i) as FreeActivity;
						if(freeAct.type == "manual") {
							freeActivtiys.addItem(freeAct);
						}
					}
					activity.freeActivitys = freeActivtiys;
					freeWithinActivityGrid.dataProvider = activity.freeActivitys;
				}
			}

			protected function deleteParticipant_clickHandler(event:MouseEvent):void {
				if(particiGrid.selectedItem != null) {
					var selectParticipant:Participant = particiGrid.selectedItem as Participant;
					var len:int = activity.participants.length;
					var participants:ArrayCollection = new ArrayCollection();
					for(var i:int=0; i<len; i++) {
						var participant:Participant = activity.participants.getItemAt(i) as Participant;
						if(selectParticipant.id != participant.id) {
							participants.addItem(participant);
						} else if(selectParticipant.id == participant.id && selectParticipant.type != participant.type) {
							participants.addItem(participant);
						}
					}
					activity.participants = participants;
					particiGrid.dataProvider = activity.participants;
				}
			}
			
			protected function deleteFreeAct_clickHandler(event:MouseEvent):void {
				if(freeWithinActivityGrid.selectedItem != null) {
					var selectFreeAct:FreeActivity = freeWithinActivityGrid.selectedItem as FreeActivity;
					var len:int = activity.freeActivitys.length;
					var freeActivtiys:ArrayCollection = new ArrayCollection();
					for(var i:int=0; i<len; i++) {
						var freeAct:FreeActivity = activity.freeActivitys.getItemAt(i) as FreeActivity;
						if(freeAct.id != selectFreeAct.id) {
							freeActivtiys.addItem(freeAct);
						}
					}
					activity.freeActivitys = freeActivtiys;
					freeWithinActivityGrid.dataProvider = activity.freeActivitys;
				}
			}
			
			protected function deleteOperation_clickHandler(event:MouseEvent):void {
				var selectOperation:Operation = operationGrid.selectedItem as Operation;
				var len:int = activity.operations.length;
				var operations:ArrayCollection = new ArrayCollection();
				for(var i:int=0; i<len; i++) {
					var operation:Operation = activity.operations.getItemAt(i) as Operation;
					if(operation.id != selectOperation.id) {
						operations.addItem(operation);
					}
				}
				activity.operations = operations;
				operationGrid.dataProvider = activity.operations;
			}

			protected function activateRule_changeHandler(event:Event):void {
				var radio:RadioButton = event.target as RadioButton;
				if((startStrategybyAppID.selected && radio.id == "startStrategybyAppID")) { //流程启动者 or 相关数据区
					startStrategybyAppActionID.enabled = true;
				} else {
					startStrategybyAppActionID.enabled = false;
				}
			}

		]]>
	</fx:Script>
	
	<s:Panel title="人工环节属性" width="100%" height="424" backgroundColor="#D6E4E7">
		<mx:TabNavigator focusEnabled="false" id="tabNavigatorID" width = '100%' height = '100%' backgroundColor="#D6E4E7" borderVisible="false" bottom="14" x="0" creationPolicy="all">
			<mx:VBox label = '基本属性'>
				<mx:Form width="100%" height="100%">
					<mx:FormItem label="环节ID" width="100%">
						<s:TextInput width="80%" id="actId" enabled="false"/>
					</mx:FormItem>
					<mx:FormItem label="环节名称" width="100%" required="true">
						<s:TextInput width="80%" id="actName"/>
					</mx:FormItem>
					<mx:FormItem label="分支模式" width="100%">
						<s:HGroup>
							<s:RadioButton groupName="split" label="单一分支" id="splitXOR"/>
							<s:RadioButton groupName="split" label="多路分支" id="splitOR"/>
							<s:RadioButton groupName="split" label="全部分支" id="splitAND"/>
						</s:HGroup>
					</mx:FormItem>
					<mx:FormItem label="聚合模式" width="100%">
						<s:HGroup>
							<s:RadioButton groupName="join" label="单一聚合" id="joinXOR"/>
							<s:RadioButton groupName="join" label="多路聚合" id="joinOR"/>
							<s:RadioButton groupName="join" label="全部聚合" id="joinAND"/>
						</s:HGroup>
					</mx:FormItem>
					<mx:FormItem label="环节时限（分钟）" width="100%">
						<s:TextInput width="80%" id="limitTime" restrict="0-9"/>
					</mx:FormItem>
					<mx:FormItem label="描述" width="100%">
						<s:TextArea height="100" width="80%" id="description"/>
					</mx:FormItem>
				</mx:Form>
			</mx:VBox>
			
			<mx:VBox label = '环节操作'>
				<mx:Form width="100%" height="100%">
					<mx:FormItem label="页面模板" width="90%" required="false">
						<s:DropDownList width="462" id="pageTemplateCombox" labelField="name"/>
					</mx:FormItem>
					<mx:FormItem label="环节操作" width="100%">
						<s:HGroup width="100%">							
							<mx:DataGrid  id="operationGrid" rowCount="10" width="386">
								<mx:columns>
									<mx:DataGridColumn headerText="ID" dataField="id" width="40"/>
									<mx:DataGridColumn headerText="编码" dataField="code" width="50"/>
									<mx:DataGridColumn headerText="操作名称" dataField="name" width="85"/>
									<mx:DataGridColumn headerText="执行动作" dataField="action"/>
								</mx:columns>
							</mx:DataGrid>
							<s:VGroup>
								<s:Button label="添加" click="OperationWin.show();" />
								<s:Button label="删除" click="deleteOperation_clickHandler(event)"/>
							</s:VGroup>
						</s:HGroup>
					</mx:FormItem>
				</mx:Form>
			</mx:VBox>
			
			<mx:VBox label = '参与者' >
				<mx:Form width="100%" height="100%">
					<mx:FormItem label="流程启动者" width="100%">
						<s:RadioButton groupName="partici" id="processStarterType" change="partici_changeHandler(event)"/>
					</mx:FormItem>
					<mx:FormItem label="从参与者列表获得" width="100%">
						<s:RadioButton groupName="partici" id="orgType" change="partici_changeHandler(event)"/>
					</mx:FormItem>
					<s:HGroup id="particiGridGroup">
						<mx:DataGrid width="467" id="particiGrid" rowCount="5">
							<mx:columns>
								<mx:DataGridColumn headerText="参与者ID" dataField="id"/>
								<mx:DataGridColumn headerText="名称" dataField="name"/>
								<mx:DataGridColumn headerText="类型" dataField="typeName"/>
							</mx:columns>
						</mx:DataGrid>
						<s:VGroup>
							<s:Button label="添加" click="ParticiWin.show()"/>
							<s:Button label="删除" click="deleteParticipant_clickHandler(event)"/>
						</s:VGroup>
					</s:HGroup>
					<s:CheckBox label="允许前驱环节根据如上列表指派环节参与者" id="allowAppointParticipants"/>
					<mx:FormItem label="活动执行者">
						<s:HGroup>
							<s:RadioButton groupName="partici" id="actExecuterType" change="partici_changeHandler(event)"/>
							<s:ComboBox id="actExecuterValue" >
								<s:ArrayCollection id="actExecuterData" />
							</s:ComboBox>
						</s:HGroup>
					</mx:FormItem>
					<mx:FormItem label="相关数据">
						<s:RadioButton groupName="partici" id="relevantdataType" change="partici_changeHandler(event)"/>
					</mx:FormItem>
					<mx:FormItem label="规则逻辑">
						<s:HGroup>
							<s:RadioButton groupName="partici" id="actLogicType" change="partici_changeHandler(event)"/>
							<s:DropDownList width="251" id="actLogicValue" labelField="name"></s:DropDownList>
						</s:HGroup>
					</mx:FormItem>
				</mx:Form>
			</mx:VBox>
			
			<mx:VBox label = '多工作项'>
				<mx:Form width="100%" height="100%">
					<mx:FormItem label="多工作项设置">
						<s:CheckBox id="wiMode" click="checkboxMutilWi_clickHandler(event)"/>
					</mx:FormItem>
					<mx:FormItem label="多工作项分配策略" height="74">
						<s:VGroup width="200" height="53" id="mutilWiGroup1" enabled="false">
							<s:RadioButton label="按参与者设置个数领取工作项" groupName="mutilWiThree" id="participantNumber" selected="true"/>
							<s:RadioButton label="按操作员个数分配工作项" groupName="mutilWiThree" id="operatorNumber"/>
							<s:CheckBox label="顺序执行工作项" id="sequentialExecute" click="checkboxSeqExecute_clickHandler(event)"/>
						</s:VGroup>
					</mx:FormItem>
					<mx:FormItem label="完成规则">
						<s:VGroup width="397" height="109" id="mutilWiGroup2" enabled="false">
							<s:RadioButton label="全部完成" groupName="mutilWiTwo" id="finishAll" selected="true" change="wiMode_changeHandler(event)"/>
							<s:HGroup>
								<s:RadioButton label="完成个数" groupName="mutilWiTwo" id="specifyNum" change="wiMode_changeHandler(event)"/>
								<s:TextInput id="specifyNumValue" enabled="false" restrict="0-9"/>
							</s:HGroup>
							<s:HGroup>
								<s:RadioButton label="完成百分比" groupName="mutilWiTwo" id="specifyPercent" change="wiMode_changeHandler(event)"/>
								<s:TextInput id="specifyPercentValue" enabled="false" restrict="0-9"/>
								<s:Label text="%" verticalAlign="middle" textAlign="left" height="22"/>
							</s:HGroup>
							<s:CheckBox label="自动终止未完成工作项" id="autoCancel"/>
						</s:VGroup>
					</mx:FormItem>
				</mx:Form>
			</mx:VBox>
			
			<mx:VBox label = '触发事件'>
				<mx:DataGrid width="100%" id="eventGrid" rowCount="8" editable="true"
							 itemEditEnd="TriggerEventHelper.eventGrid_itemEditEndHandler(event)">
					<mx:columns>
						<mx:DataGridColumn headerText="触发时机" dataField="eventTypeName" width="80" 
										   editorDataField="eventTypeNameSelected">
							<mx:itemEditor>
								<fx:Component>
									<mx:HBox width="100%">          
										<fx:Script>
											<![CDATA[
												import com.starflow.core.data.DataHolder;
												import com.starflow.core.util.FlowUtil;
												import spark.events.DropDownEvent;
												[Bindable]
												public var eventTypeNameSelected:String;
												protected function eventTypeComboBoxID_closeHandler(event:DropDownEvent):void {
													var obj:Object = eventTypeComboBoxID.selectedItem;
													eventTypeNameSelected = obj.name;
													data.eventType = obj.value;	
												}
											]]>
										</fx:Script>
										<s:ComboBox close="eventTypeComboBoxID_closeHandler(event)" 
													render="FlowUtil.comboBox_renderHandler(eventTypeComboBoxID, data, 'eventType')" 
													labelField="name" id="eventTypeComboBoxID" width="100%" dataProvider="{DataHolder.triggerMActEvents}" />
									</mx:HBox>
								</fx:Component>
							</mx:itemEditor>
						</mx:DataGridColumn>
						<mx:DataGridColumn headerText="事件动作" dataField="action"/>
						<mx:DataGridColumn headerText="调用方式" dataField="invokePatternName" width="50" 
										   editorDataField="invokePatternNameSelected">
							<mx:itemEditor>
								<fx:Component>
									<mx:HBox width="100%">          
										<fx:Script>
											<![CDATA[
												import com.starflow.core.data.DataHolder;
												import com.starflow.core.util.FlowUtil;
												import spark.events.DropDownEvent;
												[Bindable]
												public var invokePatternNameSelected:String;
												protected function invokePatternComboBoxID_closeHandler(event:DropDownEvent):void {
													var obj:Object = invokePatternComboBoxID.selectedItem;
													invokePatternNameSelected = obj.name;
													data.invokePattern = obj.value;	
												}
											]]>
										</fx:Script>
										<s:ComboBox close="invokePatternComboBoxID_closeHandler(event)" 
													render="FlowUtil.comboBox_renderHandler(invokePatternComboBoxID, data, 'invokePattern')" 
													labelField="name" id="invokePatternComboBoxID" width="100%" dataProvider="{DataHolder.invokePatterns}" />
									</mx:HBox>
								</fx:Component>
							</mx:itemEditor>
						</mx:DataGridColumn>
						<mx:DataGridColumn headerText="事务策略" dataField="transactionType" width="50" 
										   editorDataField="transactionTypeSelected">
							<mx:itemEditor>
								<fx:Component>
									<mx:HBox width="100%">          
										<fx:Script>
											<![CDATA[
												import com.starflow.core.data.DataHolder;
												import com.starflow.core.util.FlowUtil;
												import spark.events.DropDownEvent;
												[Bindable]
												public var transactionTypeSelected:String;
												protected function transactionTypeComboBoxID_closeHandler(event:DropDownEvent):void {
													var obj:Object = transactionTypeComboBoxID.selectedItem;
													transactionTypeSelected = obj.value;
													data.transactionType = obj.value;	
												}
											]]>
										</fx:Script>
										<s:ComboBox close="transactionTypeComboBoxID_closeHandler(event)" 
													render="FlowUtil.comboBox_renderHandler(transactionTypeComboBoxID, data, 'transactionType')" 
													labelField="value" id="transactionTypeComboBoxID" width="100%" dataProvider="{DataHolder.transactionTypes}" />
									</mx:HBox>
								</fx:Component>
							</mx:itemEditor>
						</mx:DataGridColumn>
						<mx:DataGridColumn headerText="异常处理" dataField="exceptionStrategyName" width="60" 
										   editorDataField="exceptionStrategyNameSelected">
							<mx:itemEditor>
								<fx:Component>
									<mx:HBox width="100%">          
										<fx:Script>
											<![CDATA[
												import com.starflow.core.data.DataHolder;
												import com.starflow.core.util.FlowUtil;
												import spark.events.DropDownEvent;
												[Bindable]
												public var exceptionStrategyNameSelected:String;
												protected function exceptionStrategyComboBoxID_closeHandler(event:DropDownEvent):void {
													var obj:Object = exceptionStrategyComboBoxID.selectedItem;
													exceptionStrategyNameSelected = obj.name;
													data.exceptionStrategy = obj.value;	
												}
											]]>
										</fx:Script>
										<s:ComboBox close="exceptionStrategyComboBoxID_closeHandler(event)" 
													render="FlowUtil.comboBox_renderHandler(exceptionStrategyComboBoxID, data, 'exceptionStrategy')" 
													labelField="name" id="exceptionStrategyComboBoxID" width="100%" dataProvider="{DataHolder.exceptionStrategys}" />
									</mx:HBox>
								</fx:Component>
							</mx:itemEditor>
						</mx:DataGridColumn>
						<mx:DataGridColumn headerText="描述" dataField="description"/>
					</mx:columns>
				</mx:DataGrid>
				<s:HGroup>
					<s:Button label="添加" click="TriggerEventHelper.addEvent_clickHandler(event, eventGrid, 'manual')" />
					<s:Button label="删除" click="TriggerEventHelper.removeEvent_clickHandler(event, eventGrid, 'manual')"/>
				</s:HGroup>
			</mx:VBox>
			
			<mx:VBox label = '自由流'>
				<mx:Form width="100%" height="100%">
					<mx:FormItem label="设置该活动为自由活动">
						<s:CheckBox id="isFreeActivity" click="checkboxFreeAct_clickHandler(event)"/>
					</mx:FormItem>
					<mx:FormItem label="自由范围设置策略">
						<s:VGroup width="413" height="220" id="freeActGroup1" enabled="false">
							<s:RadioButton label="在该流程范围内任意自由" groupName="freeTwo" id="freeWithinProcess" change="freeAct_changeHandler(event)"/>
							<s:RadioButton label="在指定活动列表范围内自由" groupName="freeTwo" id="freeWithinActivityList" change="freeAct_changeHandler(event)"/>
							<s:HGroup id="freeWithinActivityListGroup" enabled="false">							
								<mx:DataGrid width="323" id="freeWithinActivityGrid" rowCount="5">
									<mx:columns>
										<mx:DataGridColumn headerText="环节ID" dataField="id"/>
										<mx:DataGridColumn headerText="环节名称" dataField="name"/>
									</mx:columns>
								</mx:DataGrid>
								<s:VGroup>
									<s:Button label="添加" click="FreeActivityWin.show();" />
									<s:Button label="删除" click="deleteFreeAct_clickHandler(event)"/>
								</s:VGroup>
							</s:HGroup>
							<s:RadioButton label="在后续活动范围内自由" groupName="freeTwo" id="freeWithinNextActivites" change="freeAct_changeHandler(event)"/>
						</s:VGroup>
					</mx:FormItem>
					<mx:FormItem label="自由流设置规则">
						<s:VGroup width="350" height="31" id="freeActGroup2" enabled="false">
							<s:CheckBox label="流向的目标活动仅限于人工活动" id="isOnlyLimitedManualActivity" selected="true" 
										click="isOnlyLimitedManualActivity_clickHandler(event)"/>
						</s:VGroup>
					</mx:FormItem>
				</mx:Form>
			</mx:VBox>
			<mx:VBox label = '启动策略'>
				<mx:Form width="100%" height="100%">
					<mx:FormItem label="启动规则">
						<s:VGroup>
							<s:RadioButton groupName="activateRule1" label="直接运行" id="directRunningID" selected="true" change="activateRule_changeHandler(event)"/>
							<s:RadioButton groupName="activateRule1" label="待激活" id="waitingActivitionID" change="activateRule_changeHandler(event)"/>
							<s:HGroup>
								<s:RadioButton groupName="activateRule1" label="由规则逻辑返回值确定" id="startStrategybyAppID" change="activateRule_changeHandler(event)"/>
								<s:DropDownList width="266" id="startStrategybyAppActionID" enabled="false" labelField="name"></s:DropDownList>
							</s:HGroup>
						</s:VGroup>
					</mx:FormItem>
					<mx:FormItem label="重新启动规则">
						<s:VGroup>
							<s:RadioButton groupName="activateRule2" label="最初参与者" id="originalParticipantID" selected="true"/>
							<s:RadioButton groupName="activateRule2" label="最终参与者" id="finalParticipantID"/>
						</s:VGroup>
					</mx:FormItem>
				</mx:Form>
			</mx:VBox>
			<mx:VBox label = '扩展属性'>
				<mx:DataGrid width="100%" id="extendNodeGrid" rowCount="8" editable="true"
							 itemEditEnd="ExtendNodeHelper.eventGrid_itemEditEndHandler(event)">
					<mx:columns>
						<mx:DataGridColumn headerText="名称值" dataField="key" width="100"/>
						<mx:DataGridColumn headerText="值" dataField="value" width="100"/>
						<mx:DataGridColumn headerText="描述" dataField="description"/>
					</mx:columns>
				</mx:DataGrid>
				<s:HGroup>
					<s:Button label="添加" click="ExtendNodeHelper.addEvent_clickHandler(event, extendNodeGrid, 'manual')" />
					<s:Button label="删除" click="ExtendNodeHelper.removeEvent_clickHandler(event, extendNodeGrid, 'manual')"/>
				</s:HGroup>
			</mx:VBox>
		</mx:TabNavigator>
		<s:Button y="168" label="确定" click="save(event)" horizontalCenter="-50" bottom="8"/>
		<s:Button y="168" label="取消" click="hide(event)" horizontalCenter="50" bottom="8"/>
	</s:Panel>
</s:Group>
