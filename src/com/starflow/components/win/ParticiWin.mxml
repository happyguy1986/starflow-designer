<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="400" height="400"
		 creationComplete="init()">
	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		.TreeCls {
			/* these three styles are inherited by the itemRenderer */
			line-alpha: 1;    
			line-color: #808080;
			line-style: dotted;
			line-thickness: 1;
			/* these two styles make the tree lines look better */
			padding-top: 0;        /* default is 2 */
			padding-bottom: 0;    /* default is 2 */
		}
	</fx:Style>
	
	<fx:Script>
		<![CDATA[
			import com.starflow.core.support.WindowManager;
			import com.starflow.core.util.Flow;
			import com.starflow.model.ManualActivity;
			import com.starflow.model.Participant;
			
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.events.ListEvent;
			import mx.events.TreeEvent;
			import mx.rpc.AsyncToken;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;

			private static var instance:ParticiWin = new ParticiWin;
			private var type:String;
			
			[Embed(source="images/icons/plus.gif")]
			private var PLUS:Class;
			[Embed(source="images/icons/minus.gif")]
			private var MINUS:Class; 
			
			public static function show(type:String="act"):void {
				instance.type = type;
				WindowManager.show(instance);
				instance.particiTree.dataProvider = instance.treeData;
				instance.particiTree.setStyle("lineStyle","dotted");
				instance.particiTree.setStyle("disclosureClosedIcon", instance.PLUS);
				instance.particiTree.setStyle("disclosureOpenIcon", instance.MINUS);
			}
			
			public function save(event:MouseEvent):void {
				WindowManager.hide(instance);
			}
			
			public function hide(event:MouseEvent):void {
				WindowManager.hide(instance);
			}
			
			public function init():void {
				this.addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandle);
			}
			
			public function keyDownHandle(event:KeyboardEvent):void {
				if (event.charCode == Keyboard.ESCAPE) {
					hide(null);
				} else if(event.charCode == Keyboard.ENTER) {
					save(null);
				}
			}
			
			//-------------------------------------------------------------
			private var dictionary:Dictionary = new Dictionary();  
			
			private function itemOpenHandler(event:TreeEvent):void {  
				var node:Object = event.item;  
				var flashvars:Object = FlexGlobals.topLevelApplication.parameters; 
				if (node && node.@loadFlag == "false") {
					var params:URLVariables = new URLVariables(); 
					if(node.@type == "role") {
						params.type = "role"
						service.url = flashvars.queryRoleUrl;
					} else {
						params.type = "org"
						service.url = flashvars.queryOrgUrl;
					}
					params.id = node.@id;
					var token:AsyncToken = service.send(params);  
					dictionary[token] = node;  
				}  
			}  
			
			private function resultHandler(event:ResultEvent):void {  
				var folder:XML = XML(dictionary[event.token]);  
				var result:XML = XML(event.result);  
				var nodes:XMLList = result..node;  
				var node:XML = null;  
				folder.@loadFlag = "true";  
				delete folder.*;  
				for each (node in nodes) {
					node.@loadFlag = "false";
					if(node.@type == "organization")
						node.@isBranch="true"
					folder.appendChild(node);  
				}  
			}  
			
			private function faultHandler(event:FaultEvent):void {  
				var folder:XML = XML(dictionary[event.token]);  
				folder.@loadFlag = "true";  
				delete folder.*;  
			}  

			protected function particiTree_itemDoubleClickHandler(event:ListEvent):void {
				var node:XML = particiTree.selectedItem as XML;
				if(node.@isRoot != "true") {
					var partici:Participant = new Participant();
					partici.id = node.@id;
					partici.name = node.@name;
					partici.type = node.@type;
					if(node.@type == "organization")
						partici.typeName = "机构";
					else if(node.@type == "person")
						partici.typeName = "人员";
					else if(node.@type == "role")
						partici.typeName = "角色";
					
					var participants:ArrayCollection = new ArrayCollection
					if(type == 'act') {
						var activity:ManualActivity = Flow.rcAct.activity as ManualActivity;
						participants = activity.participants;
					} else if(type == 'flow')
						participants = Flow.processDefine.processStarters;
					
					//判断是否重复添加同一条数据
					var flag:Boolean = true;
					for(var i:int=0,len:int = participants.length; i<len; i++) {
						var participant:Participant = participants.getItemAt(i) as Participant;
						if(participant.id==partici.id && participant.type == partici.type) {
							flag = false;
							break;
						}
					}
					if(flag)
						participants.addItem(partici);
					if(type == 'act')
						ManualActWin.instance.particiGrid.dataProvider = participants;
					else if(type == 'flow')
						FlowWin.instance.particiGrid.dataProvider = participants;
				}
			}

		]]>
	</fx:Script>
	
	<fx:Declarations>
		<fx:XML id="treeData">
			<root>   
				<folder name="机构人员" isBranch="true" loadFlag="false" type="org" isRoot="true"/>   
				<folder name="角色" isBranch="true" loadFlag="false" type="role" isRoot="true"/>
			</root>   
		</fx:XML>   
		
		<mx:HTTPService id="service" concurrency="multiple" resultFormat="xml"    
						result="resultHandler(event)" fault="faultHandler(event)" />
	</fx:Declarations>
	
	<s:Panel title="组织机构与角色" width="100%" height="100%" backgroundColor="#D6E4E7">
		<mx:Tree x="0" width="100%" bottom="37" height="330" id="particiTree" labelField="@name" showRoot="false"
				 itemRenderer="com.starflow.itemRenderer.TreeItemLinesRenderer" styleName="TreeCls"
				 itemOpen="itemOpenHandler(event)" 
				 doubleClickEnabled="true" itemDoubleClick="particiTree_itemDoubleClickHandler(event)"/>
		<s:Button y="168" label="关闭" click="hide(event)" horizontalCenter="0" bottom="8"/>
	</s:Panel>
</s:Group>
