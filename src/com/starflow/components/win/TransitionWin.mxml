<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="402" height="400"
		 creationComplete="init()">
	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	
	<fx:Script>
		<![CDATA[
			import com.starflow.components.ActImage;
			import com.starflow.core.support.WindowManager;
			import com.starflow.core.util.Flow;
			import com.starflow.model.ManualActivity;
			import com.starflow.model.Operation;
			
			import flash.utils.getQualifiedClassName;
			
			import mx.controls.Alert;
			
			public static var instance:TransitionWin = new TransitionWin;
			
			public static function show():void {
				WindowManager.show(instance);
				
				instance.tname.text = Flow.rcLine.label.text;
				instance.description.text = Flow.rcLine.transition.description;
				instance.isDefault.selected = Flow.rcLine.transition.isDefault;
				instance.priority.selectedItem.data = String[Flow.rcLine.transition.priority];
				instance.leftValue.text = "";
				instance.compType.selectedIndex = 0;
				instance.rightValue.selectedIndex = 0;
				instance.complexExpressionValue.text = "";
				
				instance.isSimpleExpression.selected = true
				instance.leftValue.enabled = true;
				instance.compType.enabled = true;
				instance.rightValue.enabled = true;
				instance.isComplexExpression.selected = false;
				instance.complexExpressionValue.enabled = false;
				
				//初始化右值
				var actId:String = Flow.rcLine.transition.from;
				var actImage:ActImage = Flow.processDefine.actImageMap.getValue(actId) as ActImage;
				if(actImage.activity.type == "manual") {
					var activity:ManualActivity = actImage.activity as ManualActivity;
					var len:int = activity.operations.length;
					var list:ArrayCollection = new ArrayCollection();
					list.addItem({label:"请选择...", data:""});
					for(var j:int=0; j<len; j++) {
						var op:Operation = activity.operations.getItemAt(j) as Operation;
						var object:Object = new Object();
						object.label = op.name;
						object.data = op.code;
						list.addItem(object);
					}
					instance.rightValue.dataProvider = list;
				}
				
				//设置默认值
				if(!Flow.rcLine.transition.isDefault) {
					instance.priority.enabled = true;
					instance.expressGroupID.enabled = true;
					if(Flow.rcLine.transition.isSimpleExpression) {
						instance.isSimpleExpression.selected = true;
						instance.leftValue.enabled = true;
						instance.leftValue.text = Flow.rcLine.transition.leftValue;
						instance.compType.enabled = true;
						//比较类型
						var arr:Array = instance.compType.dataProvider.toArray();
						var obj:Object = arr.shift();
						var i:int=0
						while(obj != null) {
							if(obj.data == Flow.rcLine.transition.compType) {
								instance.compType.selectedIndex = i;
								break;
							}
							i++;
							obj = arr.shift();
						}
						//右值
						instance.rightValue.enabled = true;
						arr = instance.rightValue.dataProvider.toArray();
						obj = arr.shift();
						i=0
						while(obj != null) {
							if(obj.data == Flow.rcLine.transition.rightValue) {
								instance.rightValue.selectedIndex = i;
								break;
							}
							i++;
							obj = arr.shift();
						}
						instance.isComplexExpression.selected = false;
						instance.complexExpressionValue.enabled = false;
					} else {
						instance.isSimpleExpression.selected = false
						instance.leftValue.enabled = false;
						instance.compType.enabled = false;
						instance.rightValue.enabled = false;
						instance.isComplexExpression.selected = true;
						instance.complexExpressionValue.enabled = true;
						instance.complexExpressionValue.text = Flow.rcLine.transition.complexExpressionValue;
					}
				} else {
					instance.priority.enabled = false;
					instance.expressGroupID.enabled = false;
				}
					
				Flow.enableRightClick = false;
			}
			
			private function validation():Boolean {
				var index:int = 1;
				var flag:Boolean = true;
				var errors:String = "";
				
				if(isSimpleExpression.selected && !isDefault.selected) {
					if(leftValue.text == "") {
						flag = false;
						errors += (index++) + "：简单表达式左值不能为空\n";
					}
					if(rightValue.selectedItem == null || rightValue.selectedItem.data == "") {
						flag = false;
						errors += (index++) + "：简单表达式右值不能为空\n";
					}
				} else if(!isDefault.selected) {
					if(complexExpressionValue.text == "") {
						flag = false;
						errors += (index++) + "：复杂表达式值不能为空\n";
					}
				}
				
				if(!flag)
					Alert.show(errors, "提示");
				return flag;
			}
			
			public function save(event:MouseEvent):void {
				if(!validation())
					return;
				
				Flow.rcLine.label.text = tname.text;
				Flow.rcLine.transition.description = description.text;
				Flow.rcLine.transition.isDefault = isDefault.selected;
				if(priority.selectedItem != null)
					Flow.rcLine.transition.priority = priority.selectedItem.data;
				
				if(isSimpleExpression.selected && !isDefault.selected) {
					Flow.rcLine.transition.isSimpleExpression = true;
					Flow.rcLine.transition.leftValue = leftValue.text;
					Flow.rcLine.transition.compType = compType.selectedItem.data;
					Flow.rcLine.transition.rightValue = rightValue.selectedItem.data;
				} else if(!isDefault.selected) {
					Flow.rcLine.transition.isSimpleExpression = false;
					Flow.rcLine.transition.complexExpressionValue = complexExpressionValue.text;
				}
				
				WindowManager.hide(instance);
			}
			
			public function hide(event:MouseEvent):void {
				WindowManager.hide(instance);
			}
			
			public function init():void {
				this.addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandle);
			}
			
			public function keyDownHandle(event:KeyboardEvent):void {
				if (event.charCode == Keyboard.ESCAPE) {
					hide(null);
				} else if(event.charCode == Keyboard.ENTER) {
					save(null);
				}
			}
			
			protected function isDefault_clickHandler(event:MouseEvent):void {
				if(isDefault.selected) {
					priority.enabled = false;
					expressGroupID.enabled = false;
				} else {
					priority.enabled = true;
					expressGroupID.enabled = true;
				}
			}


			protected function isSimpleExpression_changeHandler(event:Event):void {
				var radio:RadioButton = event.target as RadioButton;
				if(isSimpleExpression.selected && radio.id == "isSimpleExpression") {
					isSimpleExpression.selected = true
					leftValue.enabled = true;
					compType.enabled = true;
					rightValue.enabled = true;
					isComplexExpression.selected = false;
					complexExpressionValue.enabled = false;
				} else {
					isSimpleExpression.selected = false
					leftValue.enabled = false;
					compType.enabled = false;
					rightValue.enabled = false;
					isComplexExpression.selected = true;
					complexExpressionValue.enabled = true;
				}
			}

		]]>
	</fx:Script>
	
	<s:Panel title="连线属性" width="412" height="100%">
		<mx:Form x="0" width="100%" height="100%" bottom="" y="0" backgroundColor="#D6E4E7">
			<s:HGroup>
				<s:Label text="显示名称"  height="21" verticalAlign="middle"/>
				<s:TextInput width="238" id="tname"/>
				<s:CheckBox selected="true" id="isDefault" click="isDefault_clickHandler(event)"/>
				<s:Label text="默认连线"  height="21" verticalAlign="middle"/>
			</s:HGroup>
			<mx:FormItem label="优先级">
				<s:DropDownList width="96" enabled="false" id="priority" selectedIndex="2">
					<s:ArrayCollection>
						<fx:Object label="高" data="60" />
						<fx:Object label="次高" data="50" />
						<fx:Object label="中" data="40"/>
						<fx:Object label="次中" data="30" />
						<fx:Object label="低" data="20" />
						<fx:Object label="次低" data="10" />
					</s:ArrayCollection>
				</s:DropDownList>
			</mx:FormItem>
			<s:VGroup enabled="false" id="expressGroupID">
				<s:RadioButton label="使用简单表达式" id="isSimpleExpression" selected="true" change="isSimpleExpression_changeHandler(event)"/>
				<s:HGroup>
					<s:Label text="左值" height="20" verticalAlign="middle"  width="51" textAlign="right"/>
					<s:TextInput width="110" id="leftValue"/>
					<s:ComboBox width="45" id="compType" selectedIndex="0">
						<s:ArrayCollection>
							<fx:Object label="==" data="EQ" />
							<fx:Object label="&gt;" data="GT" />
							<fx:Object label="&lt;" data="LT"/>
							<fx:Object label="&gt;=" data="GE" />
							<fx:Object label="&lt;=" data="LE" />
							<fx:Object label="!=" data="NE" />
						</s:ArrayCollection>
					</s:ComboBox>
					<s:Label text="右值" height="21" verticalAlign="middle" />
					<s:DropDownList width="109" id="rightValue" selectedIndex="0"></s:DropDownList>
				</s:HGroup>
				<s:RadioButton label="使用复杂表达式" id="isComplexExpression" change="isSimpleExpression_changeHandler(event)"/>
			</s:VGroup>
			<mx:FormItem>
				<s:TextArea width="307" height="92" id="complexExpressionValue" enabled="false"/>
			</mx:FormItem>
			<mx:FormItem label="描述">
				<s:TextArea height="73" width="306" id="description"/>
			</mx:FormItem>
		</mx:Form>
	</s:Panel>
	<s:Button label="确定" click="save(event)" id="submitBtn" x="114" y="368"/>
	<s:Button label="取消" click="hide(event)" x="218" y="368"/>
</s:Group>
